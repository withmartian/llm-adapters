interactions:
- request:
    body: '{"messages":[{"role":"user","content":"Hi, output simple json"}],"model":"deepseek-ai/DeepSeek-R1","response_format":{"type":"json_object"}}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, br
      connection:
      - keep-alive
      content-length:
      - '140'
      content-type:
      - application/json
      host:
      - api.together.xyz
      user-agent:
      - AsyncOpenAI/Python 1.59.3
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.59.3
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.7
    method: POST
    uri: https://api.together.xyz/chat/completions
  response:
    body:
      string: "{\n  \"id\": \"90a594323cc1d011\",\n  \"object\": \"chat.completion\",\n
        \ \"created\": 1738283287,\n  \"model\": \"deepseek-ai/DeepSeek-R1\",\n  \"prompt\":
        [],\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n
        \       \"role\": \"assistant\",\n        \"content\": \"<think>\\nOkay, the
        user wants me to output a simple JSON. Let me think about what that entails.
        They probably expect a basic example without any complex structures.\\n\\nFirst,
        I should start with a JSON object. Maybe include some key-value pairs with
        common data types. Let's use strings, numbers, and maybe a boolean or an array.\\n\\nLet
        me check if the syntax is correct. Keys need to be in double quotes, and string
        values also in quotes. Commas between the key-value pairs, but not after the
        last one.\\n\\nPerhaps something like:\\n\\n{\\n  \\\"name\\\": \\\"John Doe\\\",\\n
        \ \\\"age\\\": 30,\\n  \\\"isStudent\\\": false,\\n  \\\"hobbies\\\": [\\\"reading\\\",
        \\\"cycling\\\", \\\"gaming\\\"]\\n}\\n\\nThat seems simple enough. It has
        a string, a number, a boolean, and an array. Covers basic types. Let's make
        sure there's no trailing comma in the hobbies array. Yep, looks good. Alright,
        this should work as a straightforward example.\\n</think>\\n\\n```json\\n{\\n
        \ \\\"name\\\": \\\"Example\\\",\\n  \\\"value\\\": 42,\\n  \\\"isActive\\\":
        true,\\n  \\\"tags\\\": [\\\"simple\\\", \\\"json\\\", \\\"response\\\"]\\n}\\n```\",\n
        \       \"tool_calls\": []\n      },\n      \"logprobs\": null,\n      \"finish_reason\":
        \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 8,\n    \"total_tokens\":
        259,\n    \"completion_tokens\": 251\n  }\n}"
    headers:
      Access-Control-Allow-Origin:
      - '*'
      CF-Cache-Status:
      - DYNAMIC
      CF-Ray:
      - 90a594323cc1d011-SJC
      Connection:
      - keep-alive
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Fri, 31 Jan 2025 00:28:07 GMT
      ETag:
      - W/"5d5-5uuqfRoI51hVR1UTDGGuRoD2C5g"
      Retry-After:
      - '2'
      Server:
      - cloudflare
      Strict-Transport-Security:
      - max-age=15552000; includeSubDomains
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      X-Content-Type-Options:
      - nosniff
      alt-svc:
      - h3=":443"; ma=86400
      content-length:
      - '1493'
      x-api-call-end:
      - '2025-01-31T00:28:07.984Z'
      x-api-call-start:
      - '2025-01-31T00:27:57.255Z'
      x-api-received:
      - '2025-01-31T00:27:57.237Z'
      x-inference-version:
      - v2
      x-ratelimit:
      - 'false'
      x-ratelimit-limit:
      - '2'
      x-ratelimit-limit-tokens:
      - '100000'
      x-ratelimit-remaining:
      - '3'
      x-ratelimit-remaining-tokens:
      - '100000'
      x-ratelimit-reset:
      - '2'
    status:
      code: 200
      message: OK
version: 1
