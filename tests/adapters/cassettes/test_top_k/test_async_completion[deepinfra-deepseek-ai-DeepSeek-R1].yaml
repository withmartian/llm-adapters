interactions:
- request:
    body: '{"model":"deepseek-ai/DeepSeek-R1","prompt":"Hi"}'
    headers:
      accept:
      - application/json
      accept-encoding:
      - gzip, deflate, br
      connection:
      - keep-alive
      content-length:
      - '49'
      content-type:
      - application/json
      host:
      - api.deepinfra.com
      user-agent:
      - AsyncOpenAI/Python 1.59.3
      x-stainless-arch:
      - arm64
      x-stainless-async:
      - async:asyncio
      x-stainless-lang:
      - python
      x-stainless-os:
      - MacOS
      x-stainless-package-version:
      - 1.59.3
      x-stainless-retry-count:
      - '0'
      x-stainless-runtime:
      - CPython
      x-stainless-runtime-version:
      - 3.12.7
    method: POST
    uri: https://api.deepinfra.com/v1/openai/completions
  response:
    body:
      string: "{\"id\":\"cmpl-9897f58dd88240dc99a2f4e22bcbaabe\",\"object\":\"text_completion\",\"created\":1738286500,\"model\":\"deepseek-ai/DeepSeek-R1\",\"choices\":[{\"index\":0,\"text\":\"
        \u2192 Start blogging about programming, setup your pages and more...\\n\\nI'm
        Fernando, a software engineer building apps, servers, and sometimes robots.\\nYou
        can follow me on Twitter or GitHub.\\n\\n# Setting up a MEAN stack in your
        local machine with Node.js, MongoDB, Docker, Angular 4 and Nginx - Part 2\\n\\n###
        Adding MongoDB service\\n\\nWe already have a directory calledDB with a data
        folder where the data of our MongoDB will live. Let's use that. Let's start
        the MongoDB instance. To start a MongoDB instance with Docker we can execute
        this command:\\n$ docker run  --rm --name dev-mongo -v DB/data:/data/db mongo\\n\\nAlternatively,
        and following the same principles as before, we can create a docker-compose.yml
        to start and stop the container and link it with our application. Let's do
        that.\\n\\nCreate a docker-compose.yml:\\n\\nversion: '3'\\n\\n    image:
        mongo\\n    container_name: dev-mongo\\n      - \\\"27017:27017\\\"\\n      -
        ./DB/data:/data/db\\n\\n    container_name: dev-server\\n      - \\\"127.0.0.1:3000:3000\\\"\\n
        \   build: .\\n      - mongo\\n      - node_modules:/usr/src/app/node_modules\\n
        \     - ./server:/usr/src/app\\n    command: yarn dev\\n\\nThis configuration
        does the follow:\\n\\n- We define two services, mongo and server.\\n- mongo
        service uses the mongo image (I said before that docker hub has multiple images
        already created, this is the case for MongoDB). The first time you run the
        command docker-compose up this image will be pulled from docker hub automatically.
        Then, each time docker-compose up is executed, Docker will check if there
        is a new version available and pulled if so. If not, Docker will use the cached
        image. The volumes key is defined here as the path ./DB/data:/data/db which
        means that the host machine's path DB/data is mapped to /data/db in the container
        (remember in part 1 we created the DB directory). The command executed in
        the container would be mongod, specified in the image's Dockerfile. The port
        27017 in host is mapped to the same port in container, so that we can connect
        our application to MongoDB at localhost:27017.\\n\\n- server is the same as
        before but with some small additions. The links key indicates that the server
        service uses (is linked to) mongo service\",\"logprobs\":null,\"finish_reason\":\"length\"}],\"usage\":{\"prompt_tokens\":2,\"total_tokens\":514,\"completion_tokens\":512,\"estimated_cost\":0.0012817}}"
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '2512'
      Content-Type:
      - application/json
      Date:
      - Fri, 31 Jan 2025 01:21:40 GMT
      server:
      - uvicorn
      x-robots-tag:
      - noindex
    status:
      code: 200
      message: OK
version: 1
